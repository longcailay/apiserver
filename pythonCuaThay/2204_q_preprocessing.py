# -*- coding: utf-8 -*-
"""2204_Q_preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V6Y96_s5A1gDHoo6-3WaSuHZsnXOkrRe

# Import package
"""

import pandas as pd
import numpy as np
import re
from unidecode import unidecode
#Check file existe
import pathlib

# from google.colab import drive
# drive.mount('/content/drive')

"""# Some necessary function

# Read data

## Pre-processing

### Format Date
"""

def format_date(df):
    '''
    This function is used to format date for dataframe

    Inputs:
        -- df: pandas.core.frame.DataFrame
               dataframe which will be formated date

    Output:
        -- original dataframe but formated date
    '''

    # Return df if df has no 'EndDate' or 'StartDate' column
    if ('EndDate' not in df) or ('StartDate' not in df):
        return df

    df['EndDate'] = pd.to_datetime(df['EndDate'])
    df['StartDate'] = pd.to_datetime(df['StartDate'])

    return df

"""###Format coordinate (Lattitue, Longtitude)[link text]"""

def format_coordinate(df):
    '''
    This function is used to format coordinate to float64 for dataframe

    Inputs:
        -- df: pandas.core.frame.DataFrame
               dataframe which will be formated coordinate

    Output:
        -- original dataframe but formated coordinate
    '''

    # Return df if df has no 'Lat' or 'Lng' column
    if ('Lat' not in df) or ('Lng' not in df):
        return df

    df['Lat'] = pd.to_numeric(df['Lat'],errors='coerce')
    df['Lng'] = pd.to_numeric(df['Lng'],errors='coerce')

    return df

"""### Format address"""

def format_address(df):
    '''
    This function is used to extract house's number, street, ward from column address in dataframe
    Also create 3 new columns are: 'HouseNumber', 'WardName', 'StreetName'
    
    -- Inputs:
            df:  <pandas.core.frame.DataFrame>
                 df which will be formated address
                        
    -- Return:
            original dataframe but formated address and inserted 3 new columns about ward, street, house's number
    '''
    
    if 'Address' not in df.columns:
        return df
    
    # Copy address column
    address = df['Address'].copy()
    address = address.str.replace(' +', ' ', regex=True)
    addrees = address.str.strip()
    address = address.str.replace(' [Qq]uận ', ', Quận ', regex=True).str.replace(' [Qq](?:[.])? ', ', Quận ', regex=True)
    address = address.str.replace(' [Pp]hường ', ', Phường ', regex=True).str.replace(' [Pp](?:[.])? ', ', Phường ', regex=True) 
    address = address.str.replace(' [Xx]ã ', ', Xã ', regex=True)
    
    # Extract and add HouseNumber colum
    house_number = address.str.extract(pat = '(?:(?:(?<![Đđ]ường )(?<![Đđ]ường [Ss]ố )(?<![Pp]hường )(?<![Qq]uận ))(?:(?<=[Ss]ố )|(?<=^)|(?<=, ))([/\d]+[a-zA-Z]*)[, ]*)', flags=re.UNICODE)
    df['HouseNumber'] = house_number
    
    # Extract and add StreetName column
    street = address.str.extract(pat = '(?:(?:(?<=Đường)|(?<=(?:[\d\/][\w,]))|(?<=(?:[\d\/])))(?:(?: [Ss]ố)? \d+\w?)? ([.\w ]+))(?:,|$)', flags=re.UNICODE)
    df['StreetName'] = street
    
    # Extract and add WardName column
    ward = address.str.extract(pat = '(?:(?:Phường)|(?:P[.])|(?:Xã)) ([\w\d ]+),', flags=re.UNICODE)
    df['WardName'] = ward
    
    return df

"""### Determine level of house"""

def determine_level_of_house(df):
    '''
    This function is used to determined the level of house using house number column and add new column HouseLevel
    
    -- Inputs:
            df:  pandas.core.frame.DataFrame
                 df which will be inserted new column HouseLevel
                        
    -- Return:
            original df but inserted new column HouseLevel
    '''

    # Return df if 'HouseNumber' not in df without add new coulum HouseLevel
    if 'HouseNumber' not in df:
        return df
    
    df['HouseLevel'] = df.HouseNumber.str.count('/')
    df['HouseLevel'] = df['HouseLevel']
    
    return df

"""### Create Category"""

def get_label_category(row):
    '''
    This function is used to determine category for 1 row is "Cho thuê" or "Bán" or "Khác"

    Inputs:
        -- row: pandas.core.series.Series
                1 row in dataframe
    
    Output:
        -- return category of row
    '''

    if 'Bán' in row['CateName'] or 'bán' in row['CateName']:
        return 'Bán'
    elif 'Thuê' in row['CateName'] or 'thuê' in row['CateName']:
        return 'Cho thuê'
    # if price/tháng --> 'Cho thuê'
    elif 'tháng' in str(row['Price']):
        return 'Cho thuê'
    
    return 'Khác'

def create_category_column(df):

    '''
    This function is used to create new column 'Category' for dataframe

    Inputs:
        -- df: pandas.core.frame.DataFrame
               dataframe which will be inserted new column

    Output:
        -- original dataframe but inserted new column
    '''

    df['Category'] = df.apply(lambda row: get_label_category(row), axis=1)
    
    return df

"""### Create SaleUnitPrice"""

def create_SaleUnitPrice_column(df, usd_exchange_rate=23370):
    '''
    This function is used to create new column 'SaleUnitPrice' for dataframe (only rows which category are 'Bán')
    Unit: Milion (VND)

    Inputs:
        -- df: pandas.core.frame.DataFrame
               dataframe which will be inserted new column

    Output:
        -- original dataframe but inserted new column
    '''

    # Return df if 'Category' or '_id' or 'Price' or 'Area' not in df
    if ('Category' not in df) or ('_id' not in df) or ('Price' not in df) or ('Area' not in df):
        return df

    # Create new column UnitPrice wiht NaN value
    df['SaleUnitPrice'] = np.nan

    # Get infor about _id, price, area for rows which category are 'Bán'
    df_price_area_sale = df.loc[df['Category'] == 'Bán'][['_id', 'Price', 'Area']].copy()
    
    # Remove some rows which have Price's postfix containing 'vàng, tháng'
    df_price_area_sale = df_price_area_sale[df_price_area_sale.Price.astype(str).str.contains('tháng|vàng') == False].copy()

    # x Tỷ --> x * 1000
    df_price_area_sale.loc[df_price_area_sale['Price'].astype(str).str.split(' ', 1).str[1] == 'Tỷ', 'Price'] = pd.to_numeric(df_price_area_sale.loc[df_price_area_sale['Price'].astype(str).str.split(' ', 1).str[1] == 'Tỷ', 'Price'].str.split(' ', 1).str[0],errors='coerce') * 1000
    # x Triệu --> x
    df_price_area_sale.loc[df_price_area_sale['Price'].astype(str).str.split(' ', 1).str[1] == 'Triệu', 'Price'] = pd.to_numeric(df_price_area_sale.loc[df_price_area_sale['Price'].astype(str).str.split(' ', 1).str[1] == 'Triệu', 'Price'].str.split(' ', 1).str[0],errors='coerce')

    # Processing rows which have m2
    # Remove rows with has m2 but no info about area
    #   Because cannot infer price (ex 5tr/m2 --> price = 5tr * info about area)
    df_price_area_sale = df_price_area_sale.drop(df_price_area_sale[(df_price_area_sale['Price'].astype(str).str.contains('m2') == True) & (df_price_area_sale['Area'].isnull())].index)

    # Remove m2 in area
    df_price_area_sale['Area'] = pd.to_numeric(df_price_area_sale['Area'].astype(str).str.split(' ', 1).str[0],errors='coerce')

    # Create new dataframe for Triệu/m2
    df_mil_sq = df_price_area_sale[df_price_area_sale.Price.astype(str).str.contains('Triệu') == True].copy()
    # x Triệu/m² --> x * y (Area)
    df_mil_sq.Price = pd.to_numeric(df_mil_sq.Price.astype(str).str.split(' ', 1).str[0],errors='coerce') * df_mil_sq.Area
    # Update to df_price_area_sale
    df_price_area_sale.update(df_mil_sq)

    # Create new dataframe for Trăm nghìn/m2
    df_hundred_thousand_sq = df_price_area_sale[df_price_area_sale.Price.astype(str).str.contains('Trăm') == True].copy()
    # x Trăm nghìn/m² --> x/10 * y (Area)
    df_hundred_thousand_sq.Price = (pd.to_numeric(df_hundred_thousand_sq.Price.astype(str).str.split(' ', 1).str[0],errors='coerce')/10) * df_hundred_thousand_sq.Area
    # Update to df_price_area_sale
    df_price_area_sale.update(df_hundred_thousand_sq)

    # Create new dataframe for USD/m2
    df_usd_sq = df_price_area_sale[df_price_area_sale.Price.astype(str).str.contains('USD') == True].copy()
    # x USD/m² --> (x*usd_exchange_rate/1000000) * y (Area)
    df_usd_sq.Price = (pd.to_numeric(df_usd_sq.Price.astype(str).str.split(' ', 1).str[0],errors='coerce') * usd_exchange_rate/1000000) * df_usd_sq.Area
    # Update to df_price_area_sale
    df_price_area_sale.update(df_usd_sq)

    # Convert to numeric price
    df_price_area_sale.Price = pd.to_numeric(df_price_area_sale.Price,errors='coerce')

    # Create new column SaleUnitPrice
    # Drop nan in dataframe because it is impossible to calculate if the price or area is NaN 
    df_price_area_sale_notna = df_price_area_sale.dropna()

    df_price_area_sale['SaleUnitPrice'] = df_price_area_sale_notna.Price / df_price_area_sale_notna.Area

    # Update new column to original dataframe
    df.update(df_price_area_sale)

    return df

"""### Create RentPrice"""

def create_RentPrice_column(df, usd_exchange_rate=23370):
    '''
    This function is used to create new column 'RentPrice' for dataframe (only rows which category are 'Cho thuê')
    Unit: Milion (VND) per month

    Inputs:
        -- df: pandas.core.frame.DataFrame
               dataframe which will be inserted new column

    Output:
        -- original dataframe but inserted new column
    '''

    # Return df if 'Category' or '_id' or 'Price' or 'Area' not in df
    if ('Category' not in df) or ('_id' not in df) or ('Price' not in df) or ('Area' not in df):
        return df

    # Create new column RentPrice wiht NaN value
    df['RentPrice'] = np.nan

    # Get infor about _id, price, area for rows which category are 'Cho thuê'
    df_price_area_rent = df.loc[df['Category'] == 'Cho thuê'][['_id', 'Price', 'Area']].copy()

    # Remove rows with has m2 but no info about area ?????? WHY REMOVE ?
    #   Because cannot infer price (ex 5tr/m2 --> price = 5tr * info about area)
    df_price_area_rent = df_price_area_rent.drop(df_price_area_rent[(df_price_area_rent['Price'].astype(str).str.contains('m2') == True) & (df_price_area_rent['Area'].isnull())].index)

    # Remove m2 in area
    df_price_area_rent['Area'] = pd.to_numeric(df_price_area_rent['Area'].astype(str).str.split(' ', 1).str[0],errors='coerce')

    # x USD/tháng --> x * usd_exchange_rate/1000000
    df_price_area_rent.loc[df_price_area_rent['Price'].str.split(' ', 1).str[1] == 'USD/tháng', 'Price'] = pd.to_numeric(df_price_area_rent.loc[df_price_area_rent['Price'].str.split(' ', 1).str[1] == 'USD/tháng', 'Price'].str.split(' ', 1).str[0],errors='coerce') * usd_exchange_rate/1000000.0
    # x Triệu/tháng --> x
    df_price_area_rent.loc[df_price_area_rent['Price'].str.split(' ', 1).str[1] == 'Triệu/tháng', 'Price'] = pd.to_numeric(df_price_area_rent.loc[df_price_area_rent['Price'].str.split(' ', 1).str[1] == 'Triệu/tháng', 'Price'].str.split(' ', 1).str[0],errors='coerce')
    # x Trăm nghìn/tháng --> x/10
    df_price_area_rent.loc[df_price_area_rent['Price'].str.split(' ', 1).str[1] == 'Trăm nghìn/tháng', 'Price'] = pd.to_numeric(df_price_area_rent.loc[df_price_area_rent['Price'].str.split(' ', 1).str[1] == 'Trăm nghìn/tháng', 'Price'].str.split(' ', 1).str[0],errors='coerce')/10.0

    # x USD/m2/tháng --> (x/1000000) * area
    df_usd_sq = df_price_area_rent[df_price_area_rent.Price.astype(str).str.contains('USD/m2/tháng') == True].copy()
    df_usd_sq.Price = (pd.to_numeric(df_usd_sq.Price.str.split(' ', 1).str[0],errors='coerce')/1000000) * df_usd_sq.Area
    # Update to df_price_area_rent
    df_price_area_rent.update(df_usd_sq)

    # x Nghìn/m2/tháng --> (x/1000) * area
    df_thousand_sq = df_price_area_rent[df_price_area_rent.Price.astype(str).str.contains('Nghìn/m2/tháng') == True].copy()
    df_thousand_sq.Price = (pd.to_numeric(df_thousand_sq.Price.str.split(' ', 1).str[0],errors='coerce')/1000) * df_thousand_sq.Area
    # Update to df_price_area_rent
    df_price_area_rent.update(df_thousand_sq)

    # x Triệu/m2/tháng --> x * area
    df_mil_sq = df_price_area_rent[df_price_area_rent.Price.astype(str).str.contains('Triệu/m2/tháng') == True].copy()
    df_mil_sq.Price = pd.to_numeric(df_mil_sq.Price.str.split(' ', 1).str[0],errors='coerce') * df_mil_sq.Area
    # Update to df_price_area_rent
    df_price_area_rent.update(df_mil_sq)

    # x Trăm nghìn/m2/tháng --> (x/10) * area
    df_hundred_thousand_sq = df_price_area_rent[df_price_area_rent.Price.astype(str).str.contains('Trăm nghìn/m2/tháng') == True].copy()
    df_hundred_thousand_sq.Price = (pd.to_numeric(df_hundred_thousand_sq.Price.str.split(' ', 1).str[0],errors='coerce')/10) * df_hundred_thousand_sq.Area
    # Update to df_price_area_rent
    df_price_area_rent.update(df_hundred_thousand_sq)

    # Convert to numeric price
    df_price_area_rent.Price = pd.to_numeric(df_price_area_rent.Price,errors='coerce')

    # Create new column RentPrice
    df_price_area_rent['RentPrice'] = df_price_area_rent.Price

    # Update original dataframe
    df.update(df_price_area_rent)

    return df

"""### Create RentUnitPrice"""

def create_RentUnitPrice_column(df, usd_exchange_rate=23370):
    '''
    This function is used to create new column 'RentUnitPrice' for dataframe (only rows which category are 'Cho thuê')
    Unit: Milion (VND)

    Inputs:
        -- df: pandas.core.frame.DataFrame
               dataframe which will be inserted new column

    Output:
        -- original dataframe but inserted new column
    '''

    # Return df if 'Category' or '_id' or 'Price' or 'Area' not in df
    if ('Category' not in df) or ('_id' not in df) or ('Price' not in df) or ('Area' not in df):
        return df

    # Create new column UnitPrice wiht NaN value
    df['RentUnitPrice'] = np.nan

    # Create 'RentPrice' if don't exist
    if ('RentPrice' not in df):
        df = create_RentPrice_column(df, usd_exchange_rate)

    # Get infor about _id, rent price, area for rows which category are 'Cho thuê'
    df_rentprice_area = df.loc[df['Category'] == 'Cho thuê'][['_id', 'RentPrice', 'Area']].copy()
    # Drop nan in new dataframe
    df_rentprice_area.dropna(inplace=True)
    
    # Remove m2 in area
    df_rentprice_area['Area'] = pd.to_numeric(df_rentprice_area['Area'].astype(str).str.split(' ', 1).str[0],errors='coerce')

    # Create new column RentUnitPrice
    df_rentprice_area['RentUnitPrice'] = df_rentprice_area.RentPrice / df_rentprice_area.Area

    # Update new column to original dataframe
    df.update(df_rentprice_area)

    return df

"""### All in one function"""

def pre_processing(df):
    '''
    This function is used to pre-process a dataframe
    
    This function call some following functions:
        -- format_date
        -- format_coordinate
        -- format_address
        -- determine_level_of_house
        -- create_category_column
        -- create_SaleUnitPrice_column
        -- create_RentUnitPrice_column

    Inputs:
        -- df: pandas.core.frame.DataFrame
               dataframe which will be pre-processed

    Output:
        -- dataframe is pre-processed
    '''

    df = format_date(df)
    df = format_coordinate(df)
    df = format_address(df)
    df = determine_level_of_house(df)
    df = create_category_column(df)
    df = create_SaleUnitPrice_column(df)
    df = create_RentPrice_column(df)
    df = create_RentUnitPrice_column(df)

    return df

"""

```
# This is formatted as code
```

### Output to New filename CSV"""

def Pre_Processing_City_District(city_name,district_name,filename):
  if filename is "":
    filename='./output/'
    filename=filename+city_name+'_'+district_name
  filename_new=filename+"_new.csv"
  file = pathlib.Path(filename_new)

  if file.exists():
    print(filename_new+" has existed")
    return

  file = pathlib.Path(filename+'.csv')
  if not file.exists():
    print(filename+".csv has not existed")
    # return

  df_in = pd.read_csv(filename+'.csv')
  df_new=df_in.copy()
  #print('Len df before calling pre-processing: ' + str(len(df_new)))
  df_new = pre_processing(df_new)
  #print('Len df after calling pre-processing: ' + str(len(df_new)))

  #Output to file for testing purposes
  filename_new2 = unidecode(filename_new)
  filename_new2 = filename_new2.replace(" ","-").replace(" ","-").replace(" ","-")
  df_new.to_csv(filename_new2,index=False, encoding='utf-8-sig')
  print('Export to CSV file '+filename_new)

def Pre_Processing_City_All_Districts(city_name):
  tinhtp="./tinh_tp_danso_matdo.csv" #(Đọc thông tin Tỉnh/TP/Quận)
  df_city = pd.read_csv(tinhtp)
  district_df=df_city[df_city['ProvinceName']==city_name]
  district_list=list(set(district_df['DistrictName']))
  for i in range(len(district_list)):
    print("Pre Processing "+city_name+" "+district_list[i])
    Pre_Processing_City_District(city_name,district_list[i],"")

"""# Call function"""

#filename='/content/drive/My Drive/12.Vietnam Stock Analysts - Quantum Equity Research/Real Estate/Hồ Chí Minh_Quận 1'
#df_in = pd.read_csv(filename+'.csv')
#Pre_Processing_City_District("Khánh Hòa","Nha Trang","")
#Pre_Processing_City_All_Districts("Đà Nẵng")
#Pre_Processing_City_All_Districts("Khánh Hòa")
#Pre_Processing_City_All_Districts("Bà Rịa Vũng Tàu")
#Pre_Processing_City_All_Districts("Lâm Đồng")
#Pre_Processing_City_All_Districts("Bà Rịa Vũng Tàu")
#Pre_Processing_City_All_Districts("Thừa Thiên Huế")
#Pre_Processing_City_All_Districts("Thừa Thiên Huế")
#Pre_Processing_City_District("Hồ Chí Minh","Quận 4","")
Pre_Processing_City_All_Districts("Hồ Chí Minh")
#Pre_Processing_City_District("Hà Nội","Ba Đình","")
#Pre_Processing_City_All_Districts("Hà Nội")
# Pre_Processing_City_All_Districts("Nghệ An")

"""Call pre-processing function"""